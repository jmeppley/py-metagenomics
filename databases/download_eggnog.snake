##########################
#
# download_eggnog.snake
#
# Retrieves latest protein HMMs from EGGNOG:
#
###########################
import requests, re, os
from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider

HTTP = HTTPRemoteProvider()

def get_eggnog_version(eggnog_url):
    r=requests.get(eggnog_url)
    version=None
    for line in r.text.split('\n'):
        m=re.search(r'eggnog_[0-9.]+', line)
        if m:
            v=m.group(0)
            if version is None or v>version:
                version=v

    print("Version={}".format(v))
    return v

## Configurable params
#
# where to put the downloaded files:
seqdb_root = config.get('seqdb_root','seqdbs')
#
# where to get the files from
eggnog_url = config.get('eggnog_url','http://eggnogdb.embl.de/download/')
eggnog_version = config.get('eggnog_version',get_eggnog_version(eggnog_url))
eggnog_url = re.sub(r'^https?://','',eggnog_url) + eggnog_version
print(eggnog_url)
#
# get list of NOGs to download (can be list or comma separated string)
nog_list=config.get('nogs',['NOG', 'bactNOG', 'arNOG', 'euNOG', 'Viruses']) 
if isinstance(nog_list, str):
    nog_list = [s.strip() for s in nog_list.split(',')]
##

eggnog_dir = os.path.join(seqdb_root, 'EGGNOG', eggnog_version)
nog_url_subdir = {'Viruses':'viruses/Viruses'}

hmmdb_archive='hmmdb.euk_bact_arch.tar.gz'

metadata_files=[
        'COG_functional_categories.txt',
        'README.txt',
        'eggnog4.core_species_info.txt',
        'eggnog4.core_species_list.txt',
        'eggnog4.functional_categories.txt',
        #'eggnog4.proteins.all.fa.gz',
        'eggnog4.species_list.txt',
        'eggnog4.taxonomic_levels.txt',
        ]

rule all:
    input:
        expand(os.path.join(eggnog_dir, 'metadata','{mdfile}'),
                mdfile=metadata_files),
        expand(os.path.join(eggnog_dir, '{NOG}.hmm.h3p'), NOG=nog_list),
        expand(os.path.join(eggnog_dir, '{NOG}.hmm.hmm_count'), NOG=nog_list),
        # there is no stats.tt for viruses
        expand(os.path.join(eggnog_dir, '{NOG}.stats.txt'), 
               NOG=[n for n in nog_list if n[-3:]=='NOG']),
        #os.path.join(eggnog_dir, 'hmmdb')
    

rule metadata_download:
    input:
        lambda w: HTTP.remote(eggnog_url + '/' + w.mdfile, insecure=True, keep_local=True)
    output:
        '{location}/metadata/{mdfile}'
    shell:
        'mv {input} {output}'

rule hmmpress:
    input:
        '{location}/{NOG}.hmm'
    output:
        '{location}/{NOG}.hmm.h3p'
    shell:
        """
        rm -f {input}.h3?
        hmmpress {input}
        """

rule hmm_count:
    input:
        '{location}/{NOG}.hmm'
    output:
        '{location}/{NOG}.hmm.hmm_count'
    shell:
        'grep -c "^HMMER" {input} > {output}'

rule get_hmm:
    input:
        lambda w: HTTP.remote(eggnog_url + '/data/' + nog_url_subdir.get(w.NOG,w.NOG) + '/' + w.NOG + ".hmm.tar.gz", insecure=True, keep_local=True)
    output:
        '{location}/{NOG}.hmm'
    shadow: 
        "shallow"
    shell:
        """
        tar -xzf {input}
        find *hmm* -name "*.hmm" | xargs cat > {output}
        rm -f {input}
        """

rule get_stats:
    input:
        lambda w: HTTP.remote(eggnog_url + '/data/' + w.NOG + '/' + "stats.txt",
                              keep_local=True, insecure=True)
    output:
        '{location}/{NOG}.stats.txt'
    shell:
        'mv {input} {output}'

rule get_hmmdb:
    input:
        lambda w: HTTP.remote(eggnog_url + '/' + hmmdb_archive, 
                              insecure=True, 
                              keep_local=True)
    output:
        os.path.join(eggnog_dir, 'hmmdb','.done')
    shadow:
        "shallow"
    params:
        unpack_dir=eggnog_dir
    shell:
        """
        tar -zx -f {input} -C {params.unpack_dir}
        touch {output}
        rm {input}
        """
