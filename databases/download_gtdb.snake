##########################
#
# download_gtdb.snake
#
# Retrieves latest GTDB database from ecogenomic.org along with metadata
#
# follow up with format_gtdb.snake to generate annotated dbs
#
###########################
import ftplib, re, os, datetime, getpass
#from snakemake.remote.HTTP import RemoteProvider as HTTPRemoteProvider
#HTTPS = HTTPRemoteProvider()

## Configurable params

# where to put the downloaded files:
seqdb_root = config.get('seqdb_root','seqdbs')

# where to get the files from
#  https://data.gtdb.ecogenomic.org/releases/
hostname = config.get('hostname', 'data.gtdb.ecogenomic.org')

# version number
release = str(config.get('release', '95.0'))

## end configurable params

# destination
out_dir = os.path.join(seqdb_root, 'GTDB', release)

# variables for downloading
remote_db_path = config.get('remote_db_path', '/releases')
rel = release.split(".")[0]
remote_base = \
    '{hostname}{remote_db_path}/release{rel}/{release}/' \
    .format(**locals())

# files to download
file_locations = {
    f'sp_clusters_r{rel}.tsv': 'auxillary_files/',
    f'gtdbtk_r{rel}_data.tar.gz': 'auxillary_files/gtdbtk_package/full_package/',
    f'gtdb_proteins_aa_reps_r{rel}.tar.gz': 'genomic_files_reps/',
    'VERSION.txt': '',
    'RELEASE_NOTES.txt': '',
    f'ssu_all_r{rel}.fna.gz': 'genomic_files_all/',
    'metadata_field_desc.tsv': 'auxillary_files/',
    'FILE_DESCRIPTIONS.txt': '',
}

file_list = [out_dir + "/" + f.format(rel=rel) \
             for f in file_locations]
GTDB_TARBALL = [
    f for f in file_list 
    if os.path.basename(f).startswith('gtdbtk_r') 
    and f.endswith('data.tar.gz')
][0]
FAA_TARBALL = [
    f for f in file_list 
    if os.path.basename(f).startswith('gtdb_proteins_aa') 
    and f.endswith('.tar.gz')
][0]

def get_remote_path(wildcards):
    """ translate a local destination to its remote counterpart """
    filename = wildcards.filename
    return remote_base + file_locations[filename] + filename

def get_filename_url(wildcards):
    """ get the remote path as a URL """
    return "HTTPS://" + get_remote_path(wildcards)

def get_https_input(wildcards):
    """ get the remote path as a RemoteProvider HTTP object """
    return storage(get_filename_url(wildcards), keep_local=True)

rule outputs:
    input: 
        downloads=file_list,
        unpackaa=f'{out_dir}/.gtdbaa.unpacked',
        unpacktk=f'{out_dir}/.gtdbtk.unpacked',
        
rule download_file:
    input: get_https_input
    output: out_dir + '/{filename}'
    shell: 'mv {input} {output}'


rule unpack_gtdbtk:
    """
    Unpacks the big archive
    """
    input: ancient(GTDB_TARBALL)
    output: touch(f'{out_dir}/.gtdbtk.unpacked')
    benchmark: f'benchmarks/{release}/unpack.tarball.time'
    shell:
        """tar -C {out_dir} -zxf {input}
        """

rule unpack_faas:
    """
    Unpacks the protein archive
    """
    input: ancient(FAA_TARBALL)
    output: touch(f'{out_dir}/.gtdbaa.unpacked')
    benchmark: f'benchmarks/{release}/unpack.tarball.time'
    shell:
        """tar -C {out_dir} -zxf {input}
        """
