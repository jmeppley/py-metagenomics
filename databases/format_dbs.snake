##########################
#
# format_ds.snake
#
#  Rules for formatting db files
#
#  The following must be defined in config:
#   dbs: 
#     db_name:
#       fasta: /path/to/fasta
#       is_prot: True
#       fmts: [...]
#   db_fmts: [last8, diamond]
#   fmt_threads: 20
#
#   only fasta: is required, the rest default to above
#   fmts one of: blast, last, last8, diamond, bwa
#   db specific fmt list overrides global list
#
#   files to create are added to config['outputs']
###########################

# other options
fmt_threads = config.setdefault('fmt_threads', 20)

formatter_config = {
    'last8': {'base':'.ldb8/lastdb', 'suff': 'prj'},
    'last': {'base':'.ldb/lastdb', 'suff': 'prj'},
    'diamond': {'base':'', 'suff': 'dmnd'},
    'blast': {'base':'.bdb/blastdb', 'suff': 'pal'},
    'bwa': {'base': '.bwa/bwadb', 'suff': 'bwt', 'nucl_only':True}
}

# how should the db be formatted?
db_fmt_list = config.setdefault('db_fmts', ['last8','diamond'])
if isinstance(db_fmt_list, str):
    # allow for semicolon separated list
    db_fmt_list = db_fmt_list.split(';')

# set up databases
outputs = config.setdefault('outputs', set())
links = {}
prot_dict = {}
for database in config.get('dbs'):
    dbinfo = config['dbs'][database]
    is_prot = dbinfo.get('is_prot', False)
    fasta_file = dbinfo['fasta']
    dbinfo['fasta'] = fasta_file
    # count records
    outputs.add(fasta_file + ".prinseq.stats")
    # format
    for db_formatter in dbinfo.get('fmts', db_fmt_list):
        fcnf = formatter_config[db_formatter]
        if is_prot and fcnf.get('nucl_only', False):
            raise Exception("Cant format protein DB for " + db_formatter)
        db_loc = fasta_file + fcnf['base']
        db_fmt_file = db_loc + "." + fcnf['suff']
        outputs.add(db_fmt_file)
        prot_dict[fasta_file] = is_prot
        
        for link, target in dbinfo.get('links', {}).items():
            if link == ".ids":
                if not isinstance(target, str):
                    # special case:
                    # autogenerate .ids file
                    target = fasta_file + ".headers"
            if link.startswith("."):
                # link string is a suffix
                link_file_name = db_loc + link
            else:
                # link string is a file name
                link_file_name = os.path.dirname(db_loc) + os.path.sep + link
            outputs.add(link_file_name)
            logger.debug(f"Will link {link_file_name} to {target}")
            links[link_file_name] = target

rule all:
    input: outputs

rule genes_headers:
    input: '{fasta_path}'
    output: '{fasta_path}.headers'
    shell: """
        grep "^>" {input} | perl -pe 's/^>(\\S+)\\s+/\\1\\t/' > {output}
        """

rule lastdb:
    input: '{db_root}'
    output: '{db_root}' + formatter_config['last']['base'] \
                  + "." + formatter_config['last']['suff']
    benchmark: 'benchmarks{db_root}.lastdb.time'
    params:
        prot=lambda w: "-p" if prot_dict[w.db_root] else "",
        db='{db_root}' + formatter_config['last']['base'],
        chunk=f'-s {config["last_chunk"]}' if 'last_chunk' in config else "",
    threads: fmt_threads
    shell: "lastdb -c -v -P {threads} \
            {params.chunk} {params.prot} {params.db} {input}"

rule lastdb8:
    input: '{db_root}'
    output: '{db_root}' + formatter_config['last8']['base'] \
                  + "." + formatter_config['last8']['suff']
    benchmark: 'benchmarks{db_root}.lastdb8.time'
    params:
        prot=lambda w: "-p" if prot_dict[w.db_root] else "",
        db='{db_root}' + formatter_config['last8']['base'],
        chunk=f'-s {config["last8_chunk"]}' if 'last8_chunk' in config else "",
    threads: fmt_threads
    shell: "lastdb8 -c -v -P {threads} \
            {params.chunk} {params.prot} {params.db} {input}"

rule bwadb:
    input: '{db_root}'
    output: '{db_root}' + formatter_config['bwa']['base'] \
                  + "." + formatter_config['bwa']['suff']
    benchmark: 'benchmarks{db_root}.bwadb.time'
    params:
        db='{db_root}' + formatter_config['bwa']['base']
    threads: fmt_threads
    shell: "bwa index -T {threads} {input} {params.db}"

rule diamondb:
    input: '{db_root}'
    output: '{db_root}' + formatter_config['diamond']['base'] \
                  + "." + formatter_config['diamond']['suff']
    benchmark: 'benchmarks{db_root}.diamond.time'
    threads: fmt_threads
    shell: "diamond makedb --in {input} --db {input}"

rule blastdb:
    input: '{db_root}'
    output: '{db_root}' + formatter_config['blast']['base'] \
                  + "." + formatter_config['blast']['suff']
    benchmark: 'benchmarks{db_root}.blast.time'
    params:
        type=lambda w: "prot" if prot_dict[w.db_root] else "nucl",
        db='{db_root}' + formatter_config['blast']['base']
    threads: fmt_threads
    shell: "makeblastdb -in {input} -dbtype {params.type} -parse_seqids -db {params.db}"

rule count:
    input: '{db_root}'
    output: '{db_root}.prinseq.stats'
    benchmark: 'benchmarks{db_root}.stats.time'
    shell: """
        prinseq-lite.pl -fasta {input} -stats_len -stats_info \
             > {output}
        # print to screen in case someone's watching
        echo {output}
        head -5 {output}
        """

# To prevent link rule from matchin every file on earth:
#  dynamically generate overly specific regex constraint that lists all file names
pattern = "(" + "|".join(links.keys()) + ")"
logger.debug("LINKS PATTERN:\n" + pattern)

def get_link_command(wildcards):
    """ try to use absolute relative paths """
    input_file = links[wildcards.link_file_name]
    # make link relative so that it is protable
    return "ln -s $(realpath --relative-to=$(dirname {}) {})".format(
        wildcards.link_file_name,
        os.path.abspath(input_file)
    )

def get_link_target(wildcards):
    target = links[wildcards.link_file_name]
    logger.debug(f"link: {target} -> {wildcards.link_file_name}")
    return target

rule link:
    input: get_link_target
    output: "{link_file_name}"
    wildcard_constraints:
        link_file_name=pattern
    params:
        command = get_link_command,
    shell: "rm -f {output} && {params.command} {output}"

