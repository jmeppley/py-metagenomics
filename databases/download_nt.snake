##########################
#
# download_nt.snake
#
# Retrieves latest nt database from NCBI and formats for lastal8
#
###########################
import ftplib, re, os, datetime, getpass
from snakemake.remote.FTP import RemoteProvider as FTPRemoteProvider

FTP = FTPRemoteProvider()

def get_file_date(host, path,
                  password=None,
                  username='ftp',
                  fmt_string="%Y%m%d"):
    """ Return modify time of file on FTP server """
    if password is None:
        raise Exception("Please supply a password for the FTP server!")

    connection = ftplib.FTP(host=host,
                            user=username,
                            passwd=password)
    mdtm_string = connection.sendcmd("MDTM " + path)
    return datetime.datetime.strptime(mdtm_string.split()[-1], "%Y%m%d%H%M%S") \
                            .strftime(fmt_string)


## Configurable params
#
# where to put the downloaded files:
seqdb_root = config.get('seqdb_root','seqdbs')
#
# where to get the files from
hostname = config.get('hostname', 'ftp.ncbi.nlm.nih.gov')
username = config.get('username', 'ftp')
password = config.get('email', '{}@hawaii.edu'.format(getpass.getuser()))

# fasta to download
remote_db_path = config.get('remote_nt_path', '/blast/db/FASTA/nt.gz')
db_url = hostname + remote_db_path
db_name = config.get('db_name',
                     os.path.splitext(os.path.basename(remote_db_path))[0]
                    )
db_group = config.get('db_group', 'NCBI')

# use modification time as a version
timestamp = config.get(
                'timestamp',
                get_file_date(hostname, remote_db_path, password, username)
            )

# Where to put the downloaded and formatted files
db_dir = os.path.join(seqdb_root, db_group)
db_base = os.path.join(db_dir, db_name + "_" + timestamp)
db_fasta = db_base + ".fasta"

# other options
fmt_threads = config.get('fmt_threads', 20)

alphabet = config.get('alphabet', 'nucl')
is_prot = re.search(r'^nucl', alphabet, re.I) is None
    
# configure output files
outputs = set()
outputs.add(db_fasta + ".stats")   # fasta stats by prinseq
formatter_config = {
    'last8': {'base':'.ldb8/lastdb', 'suff': 'prj'},
    'last': {'base':'.ldb/lastdb', 'suff': 'prj'},
    'bwa': {'base': '.bwa/bwadb', 'suff': 'bwt', 'nucl_only':True}
}
for db_formatter in config.get('formatters', ['last8',]):
    fcnf = formatter_config[db_formatter]
    if is_prot and fcnf.get('nucl_only', False):
        raise Exception("CAnt format protein DB for " + db_formatter)
    db_loc = db_base + fcnf['base']
    db_fmt_file = db_loc + "." + fcnf['suff']
    outputs.add(db_fmt_file)

rule all:
    input: outputs

rule lastdb:
    input: '{db_root}.fasta'
    output: '{db_root}' + formatter_config['last']['base'] \
                  + "." + formatter_config['last']['suff']
    params:
        prot="-p" if is_prot else "",
        db='{db_root}' + formatter_config['last']['suff']
    threads: fmt_threads
    shell: "lastdb -c -v -P {threads} {params.prot} {input} {params.db}"

rule lastdb8:
    input: '{db_root}.fasta'
    output: '{db_root}' + formatter_config['last8']['base'] \
                  + "." + formatter_config['last8']['suff']
    params:
        prot="-p" if is_prot else "",
        db='{db_root}' + formatter_config['last']['suff']
    threads: fmt_threads
    shell: "lastdb8 -c -v -P {threads} {params.prot} {input} {params.db}"

rule bwadb:
    input: '{db_root}.fasta'
    output: '{db_root}' + formatter_config['bwa']['base'] \
                  + "." + formatter_config['bwa']['suff']
    params:
        db='{db_root}' + formatter_config['bwa']['suff']
    threads: fmt_threads
    shell: "bwa index -T {threads} {input} {params.db}"

rule count:
    input: '{db_root}.fasta'
    output: '{db_root}.fasta.stats'
    shell: 'prinsiq-lite.pl -fasta {input} -stats_len -stats_info \
             > {output}'

rule get_db:
    input: FTP.remote(db_url, keep_local=True)
    output: db_fasta + ".gz"
    shadow: "shallow"
    shell: "mv {input} {output}"

rule hash:
    input:
        db=db_fasta + ".gz",
        hash=FTP.remote(db_url + '.md5', keep_local=True)
    output:
        hash=db_fasta + ".gz.md5",
    shell:
        """
        mv {input.hash} {output.hash}
        cat {output.hash}
        md5sum --check {output.hash}
        """

rule make_fasta:
    input:
        db=db_fasta + ".gz",
        hash=db_fasta + ".gz.md5"
    output: db_fasta
    params:
        prot="-p" if is_prot else "",
    shell: "gunzip -c {input} | tantan {params.prot} > {output}"
